// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AutoCompound extends ethereum.Event {
  get params(): AutoCompound__Params {
    return new AutoCompound__Params(this);
  }
}

export class AutoCompound__Params {
  _event: AutoCompound;

  constructor(event: AutoCompound) {
    this._event = event;
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RewardUpdated extends ethereum.Event {
  get params(): RewardUpdated__Params {
    return new RewardUpdated__Params(this);
  }
}

export class RewardUpdated__Params {
  _event: RewardUpdated;

  constructor(event: RewardUpdated) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get totalRewardX64(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get compounderRewardX64(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokenDeposited extends ethereum.Event {
  get params(): TokenDeposited__Params {
    return new TokenDeposited__Params(this);
  }
}

export class TokenDeposited__Params {
  _event: TokenDeposited;

  constructor(event: TokenDeposited) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokenWithdrawn extends ethereum.Event {
  get params(): TokenWithdrawn__Params {
    return new TokenWithdrawn__Params(this);
  }
}

export class TokenWithdrawn__Params {
  _event: TokenWithdrawn;

  constructor(event: TokenWithdrawn) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Compounder__autoCompoundResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getFee0(): BigInt {
    return this.value0;
  }

  getFee1(): BigInt {
    return this.value1;
  }

  getCompounded0(): BigInt {
    return this.value2;
  }

  getCompounded1(): BigInt {
    return this.value3;
  }
}

export class Compounder__autoCompoundInputParamsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get rewardConversion(): boolean {
    return this[1].toBoolean();
  }

  get doSwap(): boolean {
    return this[2].toBoolean();
  }
}

export class Compounder__collectResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class Compounder__collectInputParamsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get recipient(): Address {
    return this[1].toAddress();
  }

  get amount0Max(): BigInt {
    return this[2].toBigInt();
  }

  get amount1Max(): BigInt {
    return this[3].toBigInt();
  }
}

export class Compounder__decreaseLiquidityAndCollectResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class Compounder__decreaseLiquidityAndCollectInputParamsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get liquidity(): BigInt {
    return this[1].toBigInt();
  }

  get amount0Min(): BigInt {
    return this[2].toBigInt();
  }

  get amount1Min(): BigInt {
    return this[3].toBigInt();
  }

  get deadline(): BigInt {
    return this[4].toBigInt();
  }

  get recipient(): Address {
    return this[5].toAddress();
  }
}

export class Compounder extends ethereum.SmartContract {
  static bind(address: Address): Compounder {
    return new Compounder("Compounder", address);
  }

  MAX_POSITIONS_PER_ADDRESS(): BigInt {
    let result = super.call(
      "MAX_POSITIONS_PER_ADDRESS",
      "MAX_POSITIONS_PER_ADDRESS():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_POSITIONS_PER_ADDRESS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_POSITIONS_PER_ADDRESS",
      "MAX_POSITIONS_PER_ADDRESS():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accountTokens(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "accountTokens",
      "accountTokens(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_accountTokens(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accountTokens",
      "accountTokens(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addressToTokens(addr: Address): Array<BigInt> {
    let result = super.call(
      "addressToTokens",
      "addressToTokens(address):(uint256[])",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBigIntArray();
  }

  try_addressToTokens(addr: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "addressToTokens",
      "addressToTokens(address):(uint256[])",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  autoCompound(
    params: Compounder__autoCompoundInputParamsStruct
  ): Compounder__autoCompoundResult {
    let result = super.call(
      "autoCompound",
      "autoCompound((uint256,bool,bool)):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromTuple(params)]
    );

    return new Compounder__autoCompoundResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_autoCompound(
    params: Compounder__autoCompoundInputParamsStruct
  ): ethereum.CallResult<Compounder__autoCompoundResult> {
    let result = super.tryCall(
      "autoCompound",
      "autoCompound((uint256,bool,bool)):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Compounder__autoCompoundResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  callerBalances(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "callerBalances",
      "callerBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_callerBalances(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "callerBalances",
      "callerBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collect(
    params: Compounder__collectInputParamsStruct
  ): Compounder__collectResult {
    let result = super.call(
      "collect",
      "collect((uint256,address,uint128,uint128)):(uint256,uint256)",
      [ethereum.Value.fromTuple(params)]
    );

    return new Compounder__collectResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_collect(
    params: Compounder__collectInputParamsStruct
  ): ethereum.CallResult<Compounder__collectResult> {
    let result = super.tryCall(
      "collect",
      "collect((uint256,address,uint128,uint128)):(uint256,uint256)",
      [ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Compounder__collectResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  decreaseLiquidityAndCollect(
    params: Compounder__decreaseLiquidityAndCollectInputParamsStruct
  ): Compounder__decreaseLiquidityAndCollectResult {
    let result = super.call(
      "decreaseLiquidityAndCollect",
      "decreaseLiquidityAndCollect((uint256,uint128,uint256,uint256,uint256,address)):(uint256,uint256)",
      [ethereum.Value.fromTuple(params)]
    );

    return new Compounder__decreaseLiquidityAndCollectResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_decreaseLiquidityAndCollect(
    params: Compounder__decreaseLiquidityAndCollectInputParamsStruct
  ): ethereum.CallResult<Compounder__decreaseLiquidityAndCollectResult> {
    let result = super.tryCall(
      "decreaseLiquidityAndCollect",
      "decreaseLiquidityAndCollect((uint256,uint128,uint256,uint256,uint256,address)):(uint256,uint256)",
      [ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Compounder__decreaseLiquidityAndCollectResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    tokenId: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    tokenId: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerBalances(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "ownerBalances",
      "ownerBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_ownerBalances(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownerBalances",
      "ownerBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownerOf(param0: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolReward(): BigInt {
    let result = super.call("protocolReward", "protocolReward():(uint64)", []);

    return result[0].toBigInt();
  }

  try_protocolReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolReward",
      "protocolReward():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nonfungiblePositionManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _swapRouter(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AutoCompoundCall extends ethereum.Call {
  get inputs(): AutoCompoundCall__Inputs {
    return new AutoCompoundCall__Inputs(this);
  }

  get outputs(): AutoCompoundCall__Outputs {
    return new AutoCompoundCall__Outputs(this);
  }
}

export class AutoCompoundCall__Inputs {
  _call: AutoCompoundCall;

  constructor(call: AutoCompoundCall) {
    this._call = call;
  }

  get params(): AutoCompoundCallParamsStruct {
    return changetype<AutoCompoundCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class AutoCompoundCall__Outputs {
  _call: AutoCompoundCall;

  constructor(call: AutoCompoundCall) {
    this._call = call;
  }

  get fee0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fee1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get compounded0(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get compounded1(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }
}

export class AutoCompoundCallParamsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get rewardConversion(): boolean {
    return this[1].toBoolean();
  }

  get doSwap(): boolean {
    return this[2].toBoolean();
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get params(): CollectCallParamsStruct {
    return changetype<CollectCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CollectCallParamsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get recipient(): Address {
    return this[1].toAddress();
  }

  get amount0Max(): BigInt {
    return this[2].toBigInt();
  }

  get amount1Max(): BigInt {
    return this[3].toBigInt();
  }
}

export class DecreaseLiquidityAndCollectCall extends ethereum.Call {
  get inputs(): DecreaseLiquidityAndCollectCall__Inputs {
    return new DecreaseLiquidityAndCollectCall__Inputs(this);
  }

  get outputs(): DecreaseLiquidityAndCollectCall__Outputs {
    return new DecreaseLiquidityAndCollectCall__Outputs(this);
  }
}

export class DecreaseLiquidityAndCollectCall__Inputs {
  _call: DecreaseLiquidityAndCollectCall;

  constructor(call: DecreaseLiquidityAndCollectCall) {
    this._call = call;
  }

  get params(): DecreaseLiquidityAndCollectCallParamsStruct {
    return changetype<DecreaseLiquidityAndCollectCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class DecreaseLiquidityAndCollectCall__Outputs {
  _call: DecreaseLiquidityAndCollectCall;

  constructor(call: DecreaseLiquidityAndCollectCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class DecreaseLiquidityAndCollectCallParamsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get liquidity(): BigInt {
    return this[1].toBigInt();
  }

  get amount0Min(): BigInt {
    return this[2].toBigInt();
  }

  get amount1Min(): BigInt {
    return this[3].toBigInt();
  }

  get deadline(): BigInt {
    return this[4].toBigInt();
  }

  get recipient(): Address {
    return this[5].toAddress();
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawBalanceCallerCall extends ethereum.Call {
  get inputs(): WithdrawBalanceCallerCall__Inputs {
    return new WithdrawBalanceCallerCall__Inputs(this);
  }

  get outputs(): WithdrawBalanceCallerCall__Outputs {
    return new WithdrawBalanceCallerCall__Outputs(this);
  }
}

export class WithdrawBalanceCallerCall__Inputs {
  _call: WithdrawBalanceCallerCall;

  constructor(call: WithdrawBalanceCallerCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawBalanceCallerCall__Outputs {
  _call: WithdrawBalanceCallerCall;

  constructor(call: WithdrawBalanceCallerCall) {
    this._call = call;
  }
}

export class WithdrawBalanceOwnerCall extends ethereum.Call {
  get inputs(): WithdrawBalanceOwnerCall__Inputs {
    return new WithdrawBalanceOwnerCall__Inputs(this);
  }

  get outputs(): WithdrawBalanceOwnerCall__Outputs {
    return new WithdrawBalanceOwnerCall__Outputs(this);
  }
}

export class WithdrawBalanceOwnerCall__Inputs {
  _call: WithdrawBalanceOwnerCall;

  constructor(call: WithdrawBalanceOwnerCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawBalanceOwnerCall__Outputs {
  _call: WithdrawBalanceOwnerCall;

  constructor(call: WithdrawBalanceOwnerCall) {
    this._call = call;
  }
}

export class WithdrawTokenCall extends ethereum.Call {
  get inputs(): WithdrawTokenCall__Inputs {
    return new WithdrawTokenCall__Inputs(this);
  }

  get outputs(): WithdrawTokenCall__Outputs {
    return new WithdrawTokenCall__Outputs(this);
  }
}

export class WithdrawTokenCall__Inputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get withdrawBalances(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class WithdrawTokenCall__Outputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }
}
